{
    "sourceFile": "meeting_room_booking_system_frontend_admin/src/interfaces/interfaces.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754296120499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754299434736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { UpdateMeetingRoom } from \"../pages/MeetingRoomManage/UpdateMeetingRoomModal\";\r\n import { SearchBooking } from \"../pages/BookingManage/BookingManage\";\r\n import dayjs from \"dayjs\";\r\n const axiosInstance = axios.create({\r\n-    baseURL: 'http://localhost/api',\r\n+    baseURL: 'http://47.108.212.106/api',\r\n     timeout: 3000\r\n });\r\n \r\n axiosInstance.interceptors.request.use(function (config) {\r\n"
                }
            ],
            "date": 1754296120499,
            "name": "Commit-0",
            "content": "import axios from \"axios\";\r\nimport { message } from \"antd\";\r\nimport { UserInfo } from \"../pages/InfoModify/InfoModify\";\r\nimport { UpdatePassword } from \"../pages/PassWordModify/PassWordModify\";\r\nimport { CreateMeetingRoom } from \"../pages/MeetingRoomManage/CreateMeetingRoomModal\";\r\nimport { UpdateMeetingRoom } from \"../pages/MeetingRoomManage/UpdateMeetingRoomModal\";\r\nimport { SearchBooking } from \"../pages/BookingManage/BookingManage\";\r\nimport dayjs from \"dayjs\";\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost/api',\r\n    timeout: 3000\r\n});\r\n\r\naxiosInstance.interceptors.request.use(function (config) {\r\n    const accessToken = localStorage.getItem('access_token');\r\n\r\n    if(accessToken) {\r\n        config.headers.authorization = 'Bearer ' + accessToken;\r\n    }\r\n    return config;\r\n})\r\n\r\naxiosInstance.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        let { data, config } = error.response;\r\n\r\n        if (data.code === 401 && !config.url.includes('/user/admin/refresh')) {\r\n            \r\n            const res = await refreshToken();\r\n\r\n            if(res.status === 200 || res.status === 201) {\r\n                return axiosInstance(config);\r\n            } else {\r\n                message.error(res.data);\r\n\r\n                setTimeout(() => {\r\n                    window.location.href = '/login';\r\n                }, 1000);\r\n            }\r\n            \r\n        } else {\r\n            return error.response;\r\n        }\r\n    }\r\n)\r\n\r\nasync function refreshToken() {\r\n    const res = await axiosInstance.get('/user/admin/refresh', {\r\n        params: {\r\n          refresh_token: localStorage.getItem('refresh_token')\r\n        }\r\n    });\r\n    localStorage.setItem('access_token', res.data.access_token);\r\n    localStorage.setItem('refresh_token', res.data.refresh_token);\r\n    return res;\r\n}\r\n\r\nexport async function login(username: string, password: string) {\r\n    return await axiosInstance.post('/user/admin/login', {\r\n        username, password\r\n    });\r\n}\r\n\r\nexport async function userSearch(username: string, nickName: string, email: string, pageNo: number, pageSize: number) {\r\n    return await axiosInstance.get('/user/list', {\r\n        params: {\r\n            username,\r\n            nickName,\r\n            email,\r\n            pageNo,\r\n            pageSize\r\n        }\r\n    });\r\n}\r\n\r\nexport async function freeze(id: number) {\r\n    return await axiosInstance.get('/user/freeze', {\r\n        params: {\r\n            id\r\n        }\r\n    });\r\n}\r\n\r\nexport async function getUserInfo() {\r\n    return await axiosInstance.get('/user/info');\r\n}\r\n\r\nexport async function updateInfo(data: UserInfo) {\r\n    return await axiosInstance.post('/user/admin/update', data);\r\n}\r\n\r\nexport async function updateUserInfoCaptcha() {\r\n    return await axiosInstance.get('/user/update/captcha');\r\n}\r\n\r\nexport async function updatePasswordCaptcha(email: string) {\r\n    return await axiosInstance.get('/user/update_password/captcha', {\r\n        params: {\r\n            address: email\r\n        }\r\n    });\r\n}\r\n\r\nexport async function updatePassword(data: UpdatePassword) {\r\n    return await axiosInstance.post('/user/admin/update_password', data);\r\n}\r\n\r\nexport async function meetingRoomList(name: string, capacity: number, equipment: string, pageNo: number, pageSize: number) {\r\n    return await axiosInstance.get('/meeting-room/list', {\r\n        params: {\r\n            name,\r\n            capacity,\r\n            equipment,\r\n            pageNo,\r\n            pageSize\r\n        }\r\n    });\r\n}\r\n\r\nexport async function deleteMeetingRoom(id: number) {\r\n    return await axiosInstance.delete('/meeting-room/' + id);\r\n}\r\n\r\nexport async function createMeetingRoom(meetingRoom: CreateMeetingRoom) {\r\n    return await axiosInstance.post('/meeting-room/create', meetingRoom);\r\n}\r\n\r\nexport async function updateMeetingRoom(meetingRoom: UpdateMeetingRoom) {\r\n    return await axiosInstance.put('/meeting-room/update', meetingRoom);\r\n}\r\n\r\nexport async function findMeetingRoom(id: number) {\r\n    return await axiosInstance.get('/meeting-room/' + id);\r\n}\r\n\r\n\r\nexport async function bookingList(searchBooking: SearchBooking, pageNo: number, pageSize: number) {\r\n\r\n    let bookingTimeRangeStart;\r\n    let bookingTimeRangeEnd;\r\n    \r\n    if(searchBooking.rangeStartDate && searchBooking.rangeStartTime) {\r\n        const rangeStartDateStr = dayjs(searchBooking.rangeStartDate).format('YYYY-MM-DD');\r\n        const rangeStartTimeStr = dayjs(searchBooking.rangeStartTime).format('HH:mm');\r\n        bookingTimeRangeStart = dayjs(rangeStartDateStr + ' ' + rangeStartTimeStr).valueOf()\r\n    }\r\n\r\n    if(searchBooking.rangeEndDate && searchBooking.rangeEndTime) {\r\n        const rangeEndDateStr = dayjs(searchBooking.rangeEndDate).format('YYYY-MM-DD');\r\n        const rangeEndTimeStr = dayjs(searchBooking.rangeEndTime).format('HH:mm');\r\n        bookingTimeRangeEnd = dayjs(rangeEndDateStr + ' ' + rangeEndTimeStr).valueOf()\r\n    }\r\n\r\n    return await axiosInstance.get('/booking/list', {\r\n        params: {\r\n            username: searchBooking.username,\r\n            meetingRoomName: searchBooking.meetingRoomName,\r\n            meetingRoomPosition: searchBooking.meetingRoomPosition,\r\n            bookingTimeRangeStart,\r\n            bookingTimeRangeEnd,\r\n            pageNo: pageNo,\r\n            pageSize: pageSize\r\n        }\r\n    });\r\n}\r\n\r\nexport async function apply(id: number) {\r\n    return await axiosInstance.get('/booking/apply/' + id);\r\n}\r\n\r\nexport async function reject(id: number) {\r\n    return await axiosInstance.get('/booking/reject/' + id);\r\n}\r\n\r\nexport async function unbind(id: number) {\r\n    return await axiosInstance.get('/booking/unbind/' + id);\r\n}\r\n\r\nexport async function meetingRoomUsedCount(startTime: string, endTime: string) {\r\n    return await axiosInstance.get('/statistic/meetingRoomUsedCount', {\r\n        params: {\r\n            startTime,\r\n            endTime\r\n        }\r\n    });\r\n}\r\n\r\nexport async function userBookingCount(startTime: string, endTime: string) {\r\n    return await axiosInstance.get('/statistic/userBookingCount', {\r\n        params: {\r\n            startTime,\r\n            endTime\r\n        }\r\n    });\r\n}"
        }
    ]
}